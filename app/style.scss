@import "_globalSCSSVars.scss";

.app {
  font-family: "FuturaPT", "Futura PT", "futura-pt", "Futura", "Proxima Nova", sans-serif;
  /*
    FuturaPT and Futura PT => Native fonts
    futura-pt => Typekit fonts

    for content blocking clients:
    Futura => native fallback
    Proxima Nova => native fallback
    sans-serif => this is an emergency
  */
  color: $colorFoundationDarkShaded;
  
  @for $headerLevel from 1 through 6 {
    h#{$headerLevel} {
      font-family: "AvenirNext-Bold", "Avenir Next", "Avenir", "Helvetica Now", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
      /*
        AvenirNext-Bold => For people with the full font natively installed
        Avenir Next => For people with some version of it
        Avenir => native fallback
        Helvetica Now => For designers with no Avenir
        Helvetica Neue => Windows
        Helvetica => old computers
        Arial => emergency
        sans-serif => Just, WTF!?
      */
      
      font-size: #{1 + (6 - $headerLevel) * 0.184}rem;
      @media screen and (min-width: $tabletBreakpoint) {
        font-size: #{1 + (6 - $headerLevel) * 0.5}rem;
      }
      @media screen and (min-width: $desktopBreakpoint) {
        font-size: #{1 + (6 - $headerLevel) * 0.7}rem;
      }
      
      word-wrap: break-word;
      font-weight: bold;
      font-weight: 700;
      letter-spacing: -2px;
      line-height: 100%;
      padding: 0;
      margin: 0;
      margin-bottom: 0.3em;
      /*
        Will compute to h1 at 4.5 rem and h6 at 1 rem, linear
      */
      
      transition-property: font-size;
      transition-timing-function: ease-out;
      transition-duration: 125ms;
    }
  }
  
  @media screen and (min-width: $mobileBreakpoint) {
    .limiter {
      max-width: $desktopBreakpoint;
      margin: 0 auto;
    }
  }
  
  .noWrap {
    white-space: nowrap;
  }
  .emphasis, em {
    font-weight: 700;
    font-style: normal;
  }
  p {
    font-weight: 300;
    line-height: 1.618em;
    padding: 0;
    margin: 1em 0 1em 0;
    letter-spacing: 1px;
  }
  
  a {
    text-decoration: none;
    &:link, &:visited {
      color: $colorContrastBase;
    }
    &:active, &:hover, &:focus {
      color: $colorContrastInteraction;
    }
  }
  
  ul {
    margin: 1em 0 1em 1em;
    padding: 0;
  }
  p + ul {
    margin-top: -1em;
  }
  
  button,
  input[type="button"],
  input[type="submit"],
  input[type="reset"] {
    background: $colorFoundationDarkShaded;
    border: 0; border: none;
    color: $colorFoundationBright;
    font: inherit;
    line-height: normal;
    overflow: visible;
    padding: 0.5em 1em;
    border-radius: 5px;
    -webkit-appearance: button;
    transition-timing-function: cubic-bezier(.1,.5,0,.85);
    transition-duration: 750ms;
    transition-property: transform;
    
    &:hover, &:focus {
      box-shadow: 0 0 6px rgba($colorFoundationDarkShaded, .33);
      transform: scale(1.075);
      transition-duration: 200ms;
      transition-timing-function: cubic-bezier(.25,2.5,.5,.5);
    }

    &.bright {
      background: $colorFoundationBrightShaded;
      color: $colorFoundationDarkShaded;
      &:hover, &:focus {
        box-shadow: 0 0 6px rgba($colorFoundationDarkShaded, .24);
      }
    }
  }
  input::-moz-focus-inner,
  button::-moz-focus-inner {
    border: 0; border: none;
    padding: 0;
  }
  
  blockquote {
    @include contentPaddingInline();
    @media screen and (max-width: $mobileBreakpointInside) {
      padding-left: 4px;
    }
    
    @include contentMarginInline();
    @media screen and (max-width: $mobileBreakpointInside) {
      margin-right: 0;
      margin-left: 0;
    }
  }
  .bright blockquote, .dark blockquote { /* DARK MODE NOT DESIGNED */
    background-color: $colorFoundationBrightShaded;
    border-left: solid 6px $colorFoundationBrightContrast;
  }
  
  .dirtyClearfix {
    clear: both;
  }
  
  img {
    max-width: 100%;
    height: auto;
    &.width-half {
      @media screen and (min-width: $tabletBreakpoint) {
        max-width: 50%;
      }
    }
    &.float-left, &.float-right {
      &.width-half {
        @media screen and (min-width: $tabletBreakpoint) {
          max-width: calc(50% - 1em);
        }
      }
    }
    &.float-left {
      float: left;
      &.width-half {
        @media screen and (min-width: $tabletBreakpoint) {
          margin-right: 1em;
        }
      }
    }
    &.float-right {
      float: right;
      &.width-half {
        @media screen and (min-width: $tabletBreakpoint) {
          margin-left: 1em;
        }
      }
    }
  }
}
